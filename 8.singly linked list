#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>

struct Node
{
	int Data;
	struct Node* Next;
};

typedef struct Node NODE;
typedef struct Node* PNODE;
typedef struct Node** PPNODE;

void InsertFirst(PPNODE,int);
void Display(PNODE);
int Count(PNODE);
void InsertLast(PPNODE,int);
void DeleteFirst(PPNODE);
void DeleteLast(PPNODE);

int main()
{
	PNODE Head=NULL;
	int iRet=0;
	InsertFirst(&Head,30);
	InsertFirst(&Head,20);
	InsertFirst(&Head,10);

	Display(Head);

		iRet=Count(Head);
		printf("%d",iRet);

		InsertLast(&Head,40);
		InsertLast(&Head,50);

		Display(Head);

		return 0;
}

void InsertFirst(PPNODE First,int No)
{
	PNODE newn=NULL;

	newn=(PNODE)malloc(sizeof(NODE));

	newn->Data=No;
    newn->Next=NULL;

	if(*First==NULL)
	{
		*First=newn;
	}
	else
	{
		newn->Next=*First;
		*First=newn;
	}
}

void Display(PNODE First)
{
	while(First!=NULL)
	{
		printf("%d\t",First->Data);
		First=First->Next;
	}
}

int Count(PNODE First)
{
	int icnt=0;

	while(First!=NULL)
	{
		icnt++;
		First=First->Next;
	}
	return icnt;
}
 void InsertLast(PPNODE First,int No)
 {
	 PNODE newn=NULL;
	 PNODE Temp=NULL;

	 newn=(PNODE)malloc(sizeof(NODE));

	 newn->Data=No;
	 newn->Next=NULL;

     if(*First==NULL)
	 {
		 *First=newn;
	 }
	 else
	 {
		 Temp=*First;

		 while(Temp->Next!=NULL)
		 {
			 Temp=Temp->Next;
		 }
           Temp->Next=newn;
	 }
 }

 void DeleteFirst(PPNODE First)
 {
	 PNODE Temp=*First;

	 if(*First!=NULL)
	 {
		 (*First)=(*First)->Next;
		 free(Temp);
	 }
 }
